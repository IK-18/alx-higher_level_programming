
==============================
3-say_my_name.py
==============================

This module defines a matrix division function """say_my_name(first_name, last_name="")""".

Usage
=====

"""say_my_name(...)""" prints """My name is <first name> <last name>""".
::

    >>> import say_my_name from '3-say_my_name'
    >>> say_my_name("John", "Smith")
    My name is John Smith

Note """last_name""" defaults to an empty string.

::

    >>> say_my_name("Bob")
    My name is Bob 

Non-Strings
==============

"""first_name""" and """last_name""" must be strings.
If either or both are not strings, a TypeError is raised.

::

    >>> say_my_name(1, "Hello")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

::

    >>> say_my_name("Hello", [4])
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

::

    >>> say_my_name(None, "Hello")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

::

    >>> say_my_name("Hello", None)
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

::

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

The same TypeError is raised yet again if any elements in ``matrix`` are
neither ints nor floats.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, "not a number", 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Finally, all the rows in ``matrix`` must be the same size. If any rows are
of different sizes, a new TypeError is raised.

::

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Invalid Number of Args
======================

If more than 2 arguments are passed a TypeError is raised.

::

    >>> say_my_name("Hello", "World", "hi")
    Traceback (most recent call last):
    ...
    TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given
